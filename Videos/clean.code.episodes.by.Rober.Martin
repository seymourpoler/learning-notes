CLEAN CODE videos

---- 02.NAMES ----
- Big scopes means big names, on the other hand, small scopes, small names. (The Scope Rule)
- Reveal intention.
- Avoid names with encoding, for example, adding the type of the variable in the name.
- pronounceable names,  it meams that we can read them.
- Method as verb, classe as name, property as name. It is like writing a sentence.
- Methods in public classes should be short, because are called from different contexts, but private methods should be long because they are more descriptives containing all the needed information.


---- 03.FUNCTIONS ----
- Functions should do one thing. (Curly's Law)
- Functions should be small. Between 4 or 6 lines of code?  it reduces loading cognitive. A huge number of well-named functions is better than a few large functions.
- Functions should have a one level of abstraction.
- Performance is not the most important thing, the most important thing is the readability of the code. But in some environments, performance is important, like embedded systems.
(The Stepdown Rule)


---- 04.FUNCTIONS STRUCTURE ----
- Function arguments: The ideal number of arguments is zero, three is the limit.
- Avoid flag arguments, because this function does more than one thing. On the other hand, it is better to create two separate functions, one for the trude case and another for the false case.
- Avoid null arguments, it is exactly the same as flag arguments. One behavour for null and another for not null.
- Defensive programming is a smell. In a public API it is completely valid, but in other situations it means that I don't trust in the code neither in the tests.
- Avoid out arguments, because it is better to return a value and not modify in arguments. It could produce side effects.
- The stepdown rule: the most important thing should be at the top of the class and the details should be at the bottom.
- Switch statements: it is a smell, it is better to use polymorphism (strategy pattern)
- To remove `Temporary C8oupling`, we could use the pattern `passing a block`
- CQS, Command Query Segregration: split functions that can change the state of system and should not return a value (commands) and others that can't and should return a value (queries).
- Tell Don't Ask: it is better to tell the object what to do instead of asking the object for information and then doing something with it. It closely related to `the      law of Demeter`.
- Law of Demeter: a method of an object should only call methods of:
  - itself
  - its parameters
  - any objects it creates
  - its direct component objects
- Avoid return in the middle of a loop, because it is hard to understand the flow of the code.
- Use error handling instead of returning error codes.
- Try should be at the top of the function even before variables declaration.
- Error handling in a responsability for a function.


---- 05.FORMS ----
- Coding standards
- Comments: are not needed because, in modern languages are remarkable expressive. But sometimes:
    - Legal comments are obligatory
    - Informative comments for some very complicated pieces of code like regular expressions.
    - Clarifications and explanations of intent are not needed.
    - Warning of consecuencies could be useful in some situations. But a good name could do the same.
    - TODO comments are not needed, because they are not going to be done.
    - Public APIs should have comments.
    In other cases comments are a smell:
    - Redundant explanations.
    - Mandated comments.
    - Journal comments. It is better to use a version control system
    - Big banner comments.
    - Closing brace comments. We have a very powerful IDEs that can show us the closing braces.
When you find a misleading comment, you should REMOVE it OR FIX it.


- Formatting: is a way of communication.
